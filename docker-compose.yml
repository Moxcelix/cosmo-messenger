version: '3.8'

services:
  app:
    build: .
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - PG_HOST=${PG_HOST}
      - PG_PORT=${PG_PORT}
    depends_on:
      - mongodb
      - postgres
    volumes:
#      - .:/go-app
      - go-modules:/go/pkg/mod
    restart: unless-stopped
    networks:
      - app-network

  mongodb:
    image: mongo:7.0
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASS}
      - MONGO_INITDB_DATABASE=${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${PG_NAME}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "${PG_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
  postgres_data:
  go-modules:

networks:
  app-network:
    driver: bridge